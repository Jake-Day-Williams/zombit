- @posts.each_with_index do |post, rank|
    .block
      .post-rank
        - @page = params[:page].to_i
        - if @page > 1 
          = (@page - 1) * @per_page + rank += 1
        - else
          = rank += 1  
      .vote-box 
        - if user_signed_in?
          - if current_user.voted_up_on? post
            = link_to like_post_path(post), method: :put, remote: true, class: "glyphicon glyphicon-chevron-up up-vote" do
          - else
            = link_to like_post_path(post), method: :put, class: "glyphicon glyphicon-chevron-up no-vote" do
          br  
          = post.cached_votes_score
          br
          - if current_user.voted_down_on? post
            = link_to dislike_post_path(post), method: :put, class: "glyphicon glyphicon-chevron-down down-vote" do 
          - else
            = link_to dislike_post_path(post), method: :put, class: "glyphicon glyphicon-chevron-down no-vote" do
        - else
          = link_to new_user_registration_path, class: "glyphicon glyphicon-chevron-up no-vote" do
          br  
          = post.cached_votes_score
          br
          = link_to new_user_registration_path, class: "glyphicon glyphicon-chevron-down no-vote" do   
      .media
        .media-left
          - if post.url?
            a href= post.url        
              - object = LinkThumbnailer.generate(post.url)
              - if object.images.any? 
                img.media-object alt="image" src="#{object.images.first.src.to_s}" 
              - else 
                img.media-object alt="image" src="http://www.megaicons.net/static/img/icons_title/8/178/title/debug-external-link-icon.png"         
          - else 
            a href= post_path(post)
              img.media-object alt="image" src="http://www.myiconfinder.com/uploads/iconsets/128-128-8167579fda39e217d8a2da183ad0306e.png"
        .media-body
          .title
            .media-heading
              #link-heading
                - if post.url?
                  = link_to post.title, post.url
                  span.links<
                    = link_to "(#{URI.parse(post.url).host.sub(/\Awww\./, '')})", post.url
                - else
                  = link_to post.title, post
                  span.links<
                    = "(subreddit)"
          .info
            | submitted #{time_ago_in_words(post.created_at)} ago by #{post.user.username}
          .links
            = link_to "#{post.all_comments.count} comments", post

.pagination
  = paginate @posts
